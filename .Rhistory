# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
nbastatR::dictionary_bref_teams()
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
nbastatR::dictionary_bref_teams() %>%
View(9)
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
nbastatR::dictionary_bref_teams() %>%
View()
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
select(slugTeamBREF, nameTeamBREF)
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by = slugTeamBREF)
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
select(slugTeamBREF, nameTeamBREF)
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by = "slugTeamBREF")
team_talent
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by.x = "slugTeamBREF", by.y = "slugTeamsBREF")
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by.x = "slugTeamsBREF", by.y = "slugTeamBREF")
team_talent
team_names_bref
View(team_names_bref)
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams()
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
filter(activeTeam == TRUE) %>%
select(slugTeamBREF, nameTeamBREF)
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
filter(isActiveTeam == TRUE) %>%
select(slugTeamBREF, nameTeamBREF)
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by.x = "slugTeamsBREF", by.y = "slugTeamBREF")
team_talent
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
filter(isActiveTeam == TRUE) %>%
select(slugTeamBREF, nameTeamBREF)
nbastatR::dictionary_bref_teams()
View(nbastatR::dictionary_bref_teams())
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
group_by(slugTeamBREF) %>%
summarise_each(funs(first(.)))
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
group_by(slugTeamBREF) %>%
arrange(slugTeamBREF, desc(seasonLast)) %>%
summarise_each(funs(first(.)))
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
group_by(slugTeamBREF) %>%
arrange(slugTeamBREF, desc(seasonLast)) %>%
summarise_each(funs(first(.))) %>%
select(slugTeamBREF, nameTeamBREF)
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by.x = "slugTeamsBREF", by.y = "slugTeamBREF")
team_talent
team_wins <- nbastatR::standings(seasons = start:end) %>%
select(slugSeason, nameTeam, slugTeam, idTeam, pctWinTeam)
team_wins
# match talent with wins and coaches
df <- team_talent %>%
merge(team_wins, by.x = c("nameTeam", "slugSeason"), by.y = c("nameTeamBREF", "slugSeason")) %>%
merge(coach_id, by = c('slugSeason', 'idTeam')) %>%
View()
team_talent
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
group_by(slugTeamBREF) %>%
arrange(slugTeamBREF, desc(seasonLast)) %>%
summarise_each(funs(first(.))) %>%
rename(nameTeam = nameTeamBREF) %>%
select(slugTeamBREF, nameTeam)
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by.x = "slugTeamsBREF", by.y = "slugTeamBREF")
# match talent with wins and coaches
df <- team_talent %>%
merge(team_wins, by = c("nameTeam", "slugSeason")) %>%
merge(coach_id, by = c('slugSeason', 'idTeam')) %>%
View()
## ---------------------------
## Purpose of script: produce csv for coach FE ratings
## Author: Ramzy Al-Amine
## Date Created: 2020-11-18
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(future) # for parallel computing
library(data.table)
# Set parameters
start = 2016
end = 2018
cwd = getwd()
# Get data based on parameters
future::plan(multiprocess)
team_wins <- nbastatR::standings(seasons = start:end) %>%
select(slugSeason, nameTeam, slugTeam, idTeam, pctWinTeam)
player_stats <- nbastatR::bref_players_stats(seasons = start:end, tables = 'advanced')
team_coaches <- nbastatR::teams_coaches(seasons = start:end) %>%
filter(numberCoachType == "Head Coach") %>%
select(slugSeason, idTeam, idCoach, nameCoach)
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
group_by(slugTeamBREF) %>%
arrange(slugTeamBREF, desc(seasonLast)) %>%
summarise_each(funs(first(.))) %>%
rename(nameTeam = nameTeamBREF) %>%
select(slugTeamBREF, nameTeam)
# check coverage
team_coaches %>%
filter(slugCoach == 1) %>%
count(nameCoach, idCoach)
# compute player quality
player_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, namePlayer, ratioVORP) %>%
arrange(slugPlayerBREF, slugSeason) %>%
group_by(slugPlayerBREF) %>%
mutate(talent = lag(ratioVORP, 1)) %>%
select(slugSeason, slugPlayerBREF, talent)
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by.x = "slugTeamsBREF", by.y = "slugTeamBREF")
# match talent with wins and coaches
df <- team_talent %>%
merge(team_wins, by = c("nameTeam", "slugSeason")) %>%
merge(coach_id, by = c('slugSeason', 'idTeam')) %>%
View()
select(slugTeam, slugSeason, wins, talent, agePlayer, idCoach)
# export
dataset_name <- paste("df", start, end, sep = "-")
write_csv(df, dataset_name)
# export
dataset_name <- paste("df", start, end, sep = "-")
write_csv(df, dataset_name)
# match talent with wins and coaches
df <- team_talent %>%
merge(team_wins, by = c("nameTeam", "slugSeason")) %>%
merge(coach_id, by = c('slugSeason', 'idTeam')) %>%
is.data.frame()
# export
dataset_name <- paste("df", start, end, sep = "-")
write_csv(df, dataset_name)
# export
dataset_name <- paste("df", start, end, ".csv", sep = "-")
write_csv(df, dataset_name)
write.csv(df, dataset_name)
cwd
write.csv(df, os.path.join("R/nba_coach_fe/", dataset_name))
## ---------------------------
## Purpose of script: produce csv for coach FE ratings
## Author: Ramzy Al-Amine
## Date Created: 2020-11-18
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(future) # for parallel computing
library(data.table)
# Set parameters
start = 2000
end = 2018
cwd = getwd()
# Get data based on parameters
future::plan(multiprocess)
team_wins <- nbastatR::standings(seasons = start:end) %>%
select(slugSeason, nameTeam, slugTeam, idTeam, pctWinTeam)
player_stats <- nbastatR::bref_players_stats(seasons = start:end, tables = 'advanced')
team_coaches <- nbastatR::teams_coaches(seasons = start:end) %>%
filter(numberCoachType == "Head Coach") %>%
select(slugSeason, idTeam, idCoach, nameCoach)
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
group_by(slugTeamBREF) %>%
arrange(slugTeamBREF, desc(seasonLast)) %>%
summarise_each(funs(first(.))) %>%
rename(nameTeam = nameTeamBREF) %>%
select(slugTeamBREF, nameTeam)
# check coverage
team_coaches %>%
filter(slugCoach == 1) %>%
count(nameCoach, idCoach)
# compute player quality
player_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, namePlayer, ratioVORP) %>%
arrange(slugPlayerBREF, slugSeason) %>%
group_by(slugPlayerBREF) %>%
mutate(talent = lag(ratioVORP, 1)) %>%
select(slugSeason, slugPlayerBREF, talent)
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by.x = "slugTeamsBREF", by.y = "slugTeamBREF")
# match talent with wins and coaches
df <- team_talent %>%
merge(team_wins, by = c("nameTeam", "slugSeason")) %>%
merge(coach_id, by = c('slugSeason', 'idTeam')) %>%
is.data.frame()
# export
dataset_name <- paste("df", start, end, sep = "-")
write.csv(df, dataset_name)
df
df
View(df)
# match talent with wins and coaches
df <- team_talent %>%
merge(team_wins, by = c("nameTeam", "slugSeason")) %>%
merge(coach_id, by = c('slugSeason', 'idTeam'))
# export
dataset_name <- paste("df", start, end, sep = "-")
write.csv(df, dataset_name)
df
## ---------------------------
## Purpose of script: produce csv for coach FE ratings
## Author: Ramzy Al-Amine
## Date Created: 2020-11-18
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(future) # for parallel computing
library(data.table)
# Set parameters
start = 2000
end = 2018
cwd = getwd()
# Get data based on parameters
future::plan(multiprocess)
team_wins <- nbastatR::standings(seasons = start:end) %>%
select(slugSeason, nameTeam, slugTeam, idTeam, pctWinTeam)
player_stats <- nbastatR::bref_players_stats(seasons = start:end, tables = 'advanced')
team_coaches <- nbastatR::teams_coaches(seasons = start:end) %>%
filter(numberCoachType == "Head Coach") %>%
select(slugSeason, idTeam, idCoach, nameCoach)
# coach_directory <- nbastatR::dictionary_bref_coaches()
# team_directory <- nbastatR::nba_teams_seasons()
# team_rosters <- nbastatR::seasons_rosters(seasons = start:end)
team_names_bref <- nbastatR::dictionary_bref_teams() %>%
group_by(slugTeamBREF) %>%
arrange(slugTeamBREF, desc(seasonLast)) %>%
summarise_each(funs(first(.))) %>%
rename(nameTeam = nameTeamBREF) %>%
select(slugTeamBREF, nameTeam)
# check coverage
team_coaches %>%
filter(slugCoach == 1) %>%
count(nameCoach, idCoach)
# compute player quality
player_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, namePlayer, ratioVORP) %>%
arrange(slugPlayerBREF, slugSeason) %>%
group_by(slugPlayerBREF) %>%
mutate(talent = lag(ratioVORP, 1)) %>%
select(slugSeason, slugPlayerBREF, talent)
# compute team talent
team_talent <- player_stats %>%
select(slugSeason, slugPlayerBREF, slugTeamsBREF, countGames, agePlayer, minutes) %>%
merge(player_talent, by = c('slugSeason', 'slugPlayerBREF')) %>%
group_by(slugTeamsBREF, slugSeason) %>%
arrange(slugTeamsBREF, slugSeason, desc(minutes)) %>%
na.omit() %>%
# keep five players per teeam
mutate(n = 1:n()) %>%
filter(n <= 5) %>%
# compute roster mean
summarise_each(funs(mean(., na.rm = TRUE))) %>%
merge(team_names_bref, by.x = "slugTeamsBREF", by.y = "slugTeamBREF")
# match talent with wins and coaches
df <- team_talent %>%
merge(team_wins, by = c("nameTeam", "slugSeason")) %>%
merge(coach_id, by = c('slugSeason', 'idTeam'))
# export
dataset_name <- paste("df", start, end, sep = "-")
write.csv(df, dataset_name)
df
# check coverage
team_coaches %>%
filter(slugCoach == 1) %>%
count(nameCoach, idCoach)
team_coaches
team_coaches <- nbastatR::teams_coaches(seasons = start:end) %>%
filter(numberCoachType == "Head Coach") %>%
select(slugSeason, idTeam, idCoach, nameCoach)
## ---------------------------
## Purpose of script: produce csv for coach FE ratings
## Author: Ramzy Al-Amine
## Date Created: 2020-11-18
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(future) # for parallel computing
library(data.table)
# Set parameters
start <- 2000
end <- 2018
cwd <- getwd()
# Get data based on parameters
future::plan(multiprocess)
team_wins <- nbastatR::standings(seasons = start:end) %>%
select(slugSeason, nameTeam, slugTeam, idTeam, pctWinTeam)
player_stats <- nbastatR::bref_players_stats(seasons = start:end, tables = 'advanced')
team_coaches <- nbastatR::teams_coaches(seasons = start:end) %>%
filter(numberCoachType == "Head Coach") %>%
select(slugSeason, idTeam, idCoach, nameCoach)
team_coaches
team_coaches <- nbastatR::teams_coaches(seasons = start:end) %>%
filter(numberCoachType == "Head Coach") %>%
select(slugSeason, idTeam, idCoach, nameCoach)
# match talent with wins and coaches
df <- team_talent %>%
merge(team_wins, by = c("nameTeam", "slugSeason")) %>%
merge(team_coaches, by = c('slugSeason', 'idTeam'))
# export
dataset_name <- paste("df", start, end, sep = "-")
write.csv(df, dataset_name)
df
setwd("~/python/espn_fantasy")
source('~/.active-rstudio-document', echo=TRUE)
df
df %>%
select(Team, date, "FG.")
df %>%
select(Team, date, "FG.") %>%
group_by('Team')
df %>%
select(Team, date, "FG.") %>%
group_by(Team)
df %>%
select(Team, date, "FG.") %>%
group_by(Team) %>%
arrange(Team, date)
df %>%
select(Team, date, "FG.") %>%
group_by(Team) %>%
arrange(Team, date) %>%
ungroup() %>%
ggplot(aes(x = date, y = "FG.", group = Team)) +
geom_line()
df %>%
select(Team, date, "FG.") %>%
group_by(Team) %>%
arrange(Team, date) %>%
ungroup() %>%
ggplot(aes(x = date, y = as.numeric("FG."), group = Team)) +
geom_line()
df %>%
select(Team, date, "FG.") %>%
rename(stat == "FG.") %>%
group_by(Team) %>%
arrange(Team, date) %>%
ungroup() %>%
as.data.frame() %>%
ggplot(aes(x = date, y = stat, group = Team)) +
geom_line()
df %>%
select(Team, date, "FG.") %>%
rename(stat = "FG.") %>%
group_by(Team) %>%
arrange(Team, date) %>%
ungroup() %>%
as.data.frame() %>%
ggplot(aes(x = date, y = stat, group = Team)) +
geom_line()
df %>%
select(Team, date, "FG.") %>%
rename(stat = "FG.") %>%
group_by(Team) %>%
arrange(Team, date) %>%
ungroup() %>%
as.data.frame() %>%
ggplot(aes(x = date, y = stat, group = Team)) +
geom_line(label = Team)
df %>%
select(Team, date, "FG.") %>%
rename(stat = "FG.") %>%
group_by(Team) %>%
arrange(Team, date) %>%
ungroup() %>%
as.data.frame() %>%
ggplot(aes(x = date, y = stat, group = Team)) +
geom_line(label = 'Team')
